"""autogenerated by genpy from rocket/RosGPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RosGPS(genpy.Message):
  _md5sum = "03db20eaf6f5d3855a4c7d040a55ed54"
  _type = "rocket/RosGPS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 gps_time
float64 ros_time
float64 latitude
float64 longitude
float64 altitude
float64 speed
float64 climb 
float64 eps 
float64 epx 
float64 epy 
float64 epv
float64 ept
int32 NSatellites

"""
  __slots__ = ['gps_time','ros_time','latitude','longitude','altitude','speed','climb','eps','epx','epy','epv','ept','NSatellites']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_time,ros_time,latitude,longitude,altitude,speed,climb,eps,epx,epy,epv,ept,NSatellites

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RosGPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gps_time is None:
        self.gps_time = 0.
      if self.ros_time is None:
        self.ros_time = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.speed is None:
        self.speed = 0.
      if self.climb is None:
        self.climb = 0.
      if self.eps is None:
        self.eps = 0.
      if self.epx is None:
        self.epx = 0.
      if self.epy is None:
        self.epy = 0.
      if self.epv is None:
        self.epv = 0.
      if self.ept is None:
        self.ept = 0.
      if self.NSatellites is None:
        self.NSatellites = 0
    else:
      self.gps_time = 0.
      self.ros_time = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.speed = 0.
      self.climb = 0.
      self.eps = 0.
      self.epx = 0.
      self.epy = 0.
      self.epv = 0.
      self.ept = 0.
      self.NSatellites = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_12di.pack(_x.gps_time, _x.ros_time, _x.latitude, _x.longitude, _x.altitude, _x.speed, _x.climb, _x.eps, _x.epx, _x.epy, _x.epv, _x.ept, _x.NSatellites))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.gps_time, _x.ros_time, _x.latitude, _x.longitude, _x.altitude, _x.speed, _x.climb, _x.eps, _x.epx, _x.epy, _x.epv, _x.ept, _x.NSatellites,) = _struct_12di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_12di.pack(_x.gps_time, _x.ros_time, _x.latitude, _x.longitude, _x.altitude, _x.speed, _x.climb, _x.eps, _x.epx, _x.epy, _x.epv, _x.ept, _x.NSatellites))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.gps_time, _x.ros_time, _x.latitude, _x.longitude, _x.altitude, _x.speed, _x.climb, _x.eps, _x.epx, _x.epy, _x.epv, _x.ept, _x.NSatellites,) = _struct_12di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12di = struct.Struct("<12di")
